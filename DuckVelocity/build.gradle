plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = 'io.github.haappi'
version = '0.1'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.1.1")
    annotationProcessor("com.velocitypowered:velocity-api:3.1.1")
    implementation('org.apache.httpcomponents:httpclient:4.5.13')
    implementation 'cloud.commandframework:cloud-core:1.7.1'
    implementation("net.kyori:adventure-text-minimessage:4.13.0")
    implementation 'cloud.commandframework:cloud-velocity:1.7.1'
    implementation 'cloud.commandframework:cloud-annotations:1.7.1'
    implementation('org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9')
    implementation("org.json:json:20230227")

    annotationProcessor 'cloud.commandframework:cloud-annotations:1.7.1'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 14
    targetCompatibility = 14
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

assemble.dependsOn shadowJar

shadowJar {
    relocate 'javax.websocket', 'io.github.haappi.duckvelocity.javax.websocket' // Adjust the shading configuration
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

